id: ''
gist: ''
source: EXCEL
author: Microsoft
name: Create a doughnut chart
description: Create a doughnut chart
script:
  content: "$('#create-table').click(setup);\n$('#create-chart').click(createChart);\n\n/** Create chart **/\nfunction createChart() {\n    Excel.run(async (context) => {\n        let sheet: Excel.Worksheet;\n        try {\n            // Queue a command to get the sheet\n            sheet = context.workbook.worksheets.getActiveWorksheet();\n\n            // Call the helper to create the chart\n             let expensesByCategoryTable = sheet.tables.getItem(\"ExpensesByCategoryTable\");\n        \n            const dataRange = expensesByCategoryTable.getDataBodyRange();\n\n            //Create the chart\n\t\t    var categoryChart = sheet.charts.add(\"3dpie\", dataRange, \"auto\");\n\n            categoryChart.setPosition(\"A15\", \"F25\");\n            categoryChart.title.text = \"Expenses By Category\";\n            categoryChart.title.format.font.size = 10;\n            categoryChart.title.format.font.name = \"Corbel\";\n            categoryChart.title.format.font.color = \"#41AEBD\";\n            categoryChart.legend.format.font.name = \"Corbel\";\n            categoryChart.legend.format.font.size = 8;\n            categoryChart.legend.position = \"right\";\n            categoryChart.dataLabels.showPercentage = true;\n            categoryChart.dataLabels.format.font.size = 8;\n            categoryChart.dataLabels.format.font.color = \"white\";\n            let points = categoryChart.series.getItemAt(0).points;\n            points.getItemAt(0).format.fill.setSolidColor(\"#0C8DB9\");\n            points.getItemAt(1).format.fill.setSolidColor(\"#B1D9F7\");\n            points.getItemAt(2).format.fill.setSolidColor(\"#4C66C5\");\n            points.getItemAt(3).format.fill.setSolidColor(\"#5CC9EF\");\n            points.getItemAt(4).format.fill.setSolidColor(\"#5CCBAD\");\n            points.getItemAt(5).format.fill.setSolidColor(\"#A5E750\");\n                  \n\n            sheet.getUsedRange().getEntireColumn().format.autofitColumns();\n            sheet.getUsedRange().getEntireRow().format.autofitRows();\n\n            await context.sync();\n        }\n        catch (error) {\n            OfficeHelpers.Utilities.log(error);\n        }\n    })\n}\n\n/** Create a new table with some sample data */\nasync function setup() {\n    try {\n        await Excel.run(async (context) => {\n\n            await ExcelUtilities.forceCreateSheet(context, \"Playground\");\n\n            let sheet = context.workbook.worksheets.getItem(\"Playground\");\n\n\n            // Create the table\n            let expensesTable = sheet.tables.add('A1:B1', true);\n            expensesTable.name = \"ExpensesByCategoryTable\";\n\n            expensesTable.getHeaderRowRange().values = [[\"Category\", \"Expense\"]];\n\n            expensesTable.rows.add(null, [\n                [\"Groceries\", 5000],\n                [\"Entertaiment\", 400],\n                [\"Education\", 12000],\n                [\"Charity\", 1550],\n                [\"Transportation\", 225],\n                [\"Other\", 6005]\n            ]);\n\n            sheet.getUsedRange().getEntireColumn().format.autofitColumns();\n            sheet.getUsedRange().getEntireRow().format.autofitRows();\n\n            sheet.activate();\n\n            await context.sync();\n        });\n    }\n    catch (error) {\n         OfficeHelpers.Utilities.log(error);\n    }\n}\nclass ExcelUtilities {\n\tstatic async forceCreateSheet(context: Excel.RequestContext, sheetName: string): Promise<Excel.Worksheet> {\n\n\t\tif (sheetName == null || sheetName.trim() === '') {\n\t\t\t//throw new error('Sheet name cannot be blank.');\n\t\t}\n\n\t\tconst newSheet = context.workbook.worksheets.add();\n\n\t\tif (Office.context.requirements.isSetSupported('ExcelApi', 1.4)) {\n\t\t\tconsole.log(\"On 1.4\");\n\t\t\t(context as any).workbook.worksheets.getItemOrNullObject(sheetName).delete();\n\t\t}\n\t\telse {\n\t\t\tawait context.sync();\n\t\t\ttry {\n\t\t\t\tconst oldSheet = (context as Excel.RequestContext).workbook.worksheets.getItem(sheetName);\n\t\t\t\toldSheet.delete();\n\t\t\t\tawait context.sync();\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tif (error instanceof OfficeExtension.Error && error.code === Excel.ErrorCodes.itemNotFound) {\n\t\t\t\t\t// all good\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new error('Unexpected error while trying to delete sheet.', error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tnewSheet.name = sheetName;\n\t\treturn newSheet;\n\t}\n}\n\n"
  language: typescript
style:
  content: ''
  language: css
template:
  content: |
    <div id="content-header" class="ms-font-m">
        <h1>Welcome</h1>
    </div>

    <div id="content-main" class="ms-font-m">
        <p>This sample shows how to create a doughnut chart using the Excel JavaScript API.</p>
        <h3>Set up</h3>
        <button id="create-table" class="ms-Button">
            <span class="ms-Button-label">Create table</span>
        </button>
        <h3>Try it out</h3>
        <button id="create-chart" class="ms-Button">
            <span class="ms-Button-label">Create chart</span>
        </button>
    </div>
  language: html
libraries: |-
  // Office.js
  https://appsforoffice.microsoft.com/lib/1/hosted/Office.js

  // NPM libraries
  jquery
  office-ui-fabric-js/dist/js/fabric.min.js
  office-ui-fabric-js/dist/css/fabric.min.css
  office-ui-fabric-js/dist/css/fabric.components.min.css
  @microsoft/office-js-helpers/dist/office.helpers.min.js
  core-js/client/core.min.js

  // IntelliSense: Use dt~library_name for DefinitelyTyped or URLs to d.ts files
  dt~office-js
  dt~jquery
  dt~core-js
  @microsoft/office-js-helpers/dist/office.helpers.d.ts

id: ''
gist: ''
source: EXCEL
author: Microsoft
name: Get visible range from a filtered table
description: Get visible range from a filtered table
script:
  content: |
    $('#create-table').click(createTable);
    $('#get-visible-range').click(getVisibleRange);

    /** Create a new table with some sample data */
    function createTable() {
        Excel.run(async (context) => {
            let sheet: Excel.Worksheet;
            try {
                // If sheet already exists, queue a command to delete it
                context.workbook.worksheets.getItem("Playground").delete();

                // Then create a proxy object for a new worksheet
                sheet = context.workbook.worksheets.add("Playground");

                // Call the helper to create the table
                await queueCreateTable(sheet);

                //Queue a command to activate the sheet
                sheet.activate();

                // Run all of the queued up commands
                await context.sync();
            }
            catch (error) {
                // Try to activate the new sheet regardless, to show
                // how far the processing got before failing
                sheet.activate();
                await context.sync();

                // Then re-throw the original error, for appropriate error-handling
                // (in this snippet, simply showing a notification)
                throw error;
            }
        })
        .catch(handleError);
    }


    /** Filter the data in the table and get visible range*/
    function getVisibleRange() {
        Excel.run(async (context) => {
            let sheet: Excel.Worksheet;
            try {
                // Queue a command to get the sheet
                sheet = context.workbook.worksheets.getItem("Playground");

                // Call the helper to sort the table
                await queueGetVisibleRange(sheet);

                // Run all of the queued up commands
                await context.sync();
            }
            catch (error) {
                // Try to activate the new sheet regardless, to show
                // how far the processing got before failing
                sheet.activate();
                await context.sync();

                // Then re-throw the original error, for appropriate error-handling
                // (in this snippet, simply showing a notification)
                throw error;
            }
        })
        .catch(handleError);
    }
      // Helper functions:

        // Creates the table
        async function queueCreateTable(sheet: Excel.Worksheet) {

            // Queue a command to add a table to the sheet
            let expensesTable = sheet.tables.add('A1:D1', true);
            expensesTable.name = "ExpensesTable";

            // Queue a command to set the header row
            expensesTable.getHeaderRowRange().values = [["DATE", "MERCHANT", "CATEGORY", "AMOUNT"]];

            // Queue a command to add rows to the table
            expensesTable.rows.add(null, [
                ["1/1/2017", "THE PHONE COMPANY", "Communications", "$120"],
                ["1/2/2017", "NORTHWIND ELECTRIC CARS", "Transportation", "$142"],
                ["1/5/2017", "BEST FOR YOU ORGANICS COMPANY", "Groceries", "$27"],
                ["1/10/2017", "COHO VINEYARD", "Restaurant", "$33"],
                ["1/11/2017", "BELLOWS COLLEGE", "Education", "$350"],
                ["1/15/2017", "TREY RESEARCH", "Other", "$135"],
                ["1/15/2017", "BEST FOR YOU ORGANICS COMPANY", "Groceries", "$97"]
            ]);  

            // Queue a command to set the number format of the Amount column
             //expensesTable.columns.getItem("AMOUNT").numberFormat = "$#";

            //Autofit columns and rows
            sheet.getUsedRange().getEntireColumn().format.autofitColumns();
            sheet.getUsedRange().getEntireRow().format.autofitRows();
        }

        // Sort the table data
        async function queueGetVisibleRange(sheet: Excel.Worksheet) {

            // Queue a command to get the table
            const expensesTable = sheet.tables.getItem("ExpensesTable");

            // Queue a command to filter and show only below average transactions 
                var filter = expensesTable.columns.getItem("AMOUNT").filter;
                filter.apply({
                    filterOn: Excel.FilterOn.dynamic,
                    dynamicCriteria: Excel.DynamicFilterCriteria.belowAverage
                });

                var visibleRange = expensesTable.getDataBodyRange().getVisibleView().load("values");

                await sheet.context.sync();
               
                const visibleValues = visibleRange.values;

                //Write the values to a different range
                sheet.getRange("A21:D24").values = visibleValues;
        }

    function handleError(error) {
        OfficeHelpers.Utilities.log(error);
    }
  language: typescript
style:
  content: ".ms-Button {\r\n    padding: 10px;\r\n    margin:10px;\r\n}\r\n"
  language: css
template:
  content: |
    <div id="content-header" class="ms-font-m">
        <h1>Welcome</h1>
    </div>

    <div id="content-main" class="ms-font-m">
        <p>This sample shows how to filter the data and get the visible range from the filtered table using the Excel JavaScript API.</p>
        <h3>Try it out</h3>
            <button id="create-table" class="ms-Button">
            <span class="ms-Button-label">Step 1: Create table</span>
        </button>
        <button id="get-visible-range" class="ms-Button">
            <span class="ms-Button-label">Step 2: Filter and get visible view</span>
        </button>
    </div>
  language: html
libraries: |-
  // Office.js
  https://appsforoffice.officeapps.live.com/afo/lib/beta/hosted/office.js

  // NPM libraries
  jquery
  office-ui-fabric-js/dist/js/fabric.min.js
  office-ui-fabric-js/dist/css/fabric.min.css
  office-ui-fabric-js/dist/css/fabric.components.min.css
  @microsoft/office-js-helpers/dist/office.helpers.min.js
  core-js/client/core.min.js

  // IntelliSense: Use dt~library_name for DefinitelyTyped or URLs to d.ts files
  dt~office-js
  dt~jquery
  dt~core-js
  @microsoft/office-js-helpers/dist/office.helpers.d.ts

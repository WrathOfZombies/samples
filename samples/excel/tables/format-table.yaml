id: ''
gist: ''
source: EXCEL
author: Microsoft
name: Format table
description: Format a table
script:
  content: |+
    $('#create-table').click(createTable);
    $('#format-table').click(formatTable);

    /** Create a new table with sample data */
    async function createTable() {
        try {
            // Run a batch operation against the Excel object model
            await Excel.run(async (context) => {
                
                // Force create the Playground sheet
                await ExcelUtilities.forceCreateSheet(context, "Playground");

                let sheet: Excel.Worksheet = context.workbook.worksheets.getItem("Playground");

                // Call the helper to create the table
                createTableHelper(sheet);
                
                //Queue a command to activate the sheet
                sheet.activate();

                // Run all of the queued up commands
                await context.sync();
            });
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }


    /** Format the different components of the table*/
    async function formatTable() {
        try {
            await Excel.run(async (context) => {
                let sheet: Excel.Worksheet;
                    // Queue a command to get the sheet
                    sheet = context.workbook.worksheets.getItem("Playground");

                    // Call the helper to format the table
                    formatTableHelper(sheet);

                    // Run all of the queued up commands
                    await context.sync();
                });
         }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }

    // Create the table
    function createTableHelper(sheet: Excel.Worksheet) {

            // Queue a command to add a table to the sheet
            let expensesTable = sheet.tables.add('A1:D1', true);
            expensesTable.name = "ExpensesTable";

            // Queue a command to set the header row
            expensesTable.getHeaderRowRange().values = [["DATE", "MERCHANT", "CATEGORY", "AMOUNT"]];

            // Queue a command to add rows to the table
            expensesTable.rows.add(null, [
                ["1/1/2017", "THE PHONE COMPANY", "Communications", "$120"],
                ["1/2/2017", "NORTHWIND ELECTRIC CARS", "Transportation", "$142"],
                ["1/5/2017", "BEST FOR YOU ORGANICS COMPANY", "Groceries", "$27"],
                ["1/10/2017", "COHO VINEYARD", "Restaurant", "$33"],
                ["1/11/2017", "BELLOWS COLLEGE", "Education", "$350"],
                ["1/15/2017", "TREY RESEARCH", "Other", "$135"],
                ["1/15/2017", "BEST FOR YOU ORGANICS COMPANY", "Groceries", "$97"]
            ]);  

            //Autofit columns and rows
            if (Office.context.requirements.isSetSupported('ExcelApi', 1.2)) {
                        sheet.getUsedRange().getEntireColumn().format.autofitColumns();
            sheet.getUsedRange().getEntireRow().format.autofitRows();
            }
        }

    // Format the different components of the table
    function formatTableHelper(sheet: Excel.Worksheet) {

            // Queue a command to add a table to the sheet
            let expensesTable = sheet.tables.getItem("ExpensesTable");

            // Queue a command to get the header range and format it 
            expensesTable.getHeaderRowRange().format.fill.color = "#00AA00";

            // Queue a command to get the data range and format it 
            expensesTable.getDataBodyRange().format.fill.color = "#FFFF00";

            // Queue a command to get the second row and format it 
            expensesTable.rows.getItemAt(1).getRange().format.fill.color = "#FF5733";

            // Queue a command to get the first column and format it
            expensesTable.columns.getItemAt(0).getRange().format.fill.color = "#0000FF";

            //Autofit columns and rows
            if (Office.context.requirements.isSetSupported('ExcelApi', 1.2)) {
                        sheet.getUsedRange().getEntireColumn().format.autofitColumns();
            sheet.getUsedRange().getEntireRow().format.autofitRows();
            }
    }

    class ExcelUtilities {
        /**
         * Utility to delete a worksheet if it already exists.
         * @returns true if the sheet had existed before being deleted.
         */
        static async forceCreateSheet(context: Excel.RequestContext, sheetName: string): Promise<Excel.Worksheet> {

            if (sheetName == null || sheetName.trim() === '') {
                //throw new error('Sheet name cannot be blank.');
            }

            const newSheet = context.workbook.worksheets.add();

            if (Office.context.requirements.isSetSupported('ExcelApi', 1.4)) {
                console.log("On 1.4");
                (context as any).workbook.worksheets.getItemOrNullObject(sheetName).delete();
            }
            else {
                // For compatibility with ExcelApi 1.1, using a throwing-behavior check to determine whether the item exists and delete it.
                // In ExcelApi 1.4, this code could instead have been in-lined into the caller by simply doing:
                // context.workbook.worksheets.getItemOrNullObject(sheetName).delete()
                await context.sync();
                try {
                    const oldSheet = (context as Excel.RequestContext).workbook.worksheets.getItem(sheetName);
                    oldSheet.delete();
                    await context.sync();
                }
                catch (error) {
                    if (error instanceof OfficeExtension.Error && error.code === Excel.ErrorCodes.itemNotFound) {
                        // all good
                    }
                    else {
                        throw new error('Unexpected error while trying to delete sheet.', error);
                    }
                }
            }
            newSheet.name = sheetName;
            return newSheet;
        }
    }



  language: typescript
style:
  content: ''
  language: css
template:
  content: |
    <div id="content-header" class="ms-font-m">
        <h1>Welcome</h1>
    </div>

    <div id="content-main" class="ms-font-m">
        <p>This sample shows how to format the different components of a table using the Excel JavaScript API.</p>
        <h3>Set up</h3>
        <button id="create-table" class="ms-Button">
            <span class="ms-Button-label">Create table</span>
        </button>
        <h3>Try it out</h3>
        <button id="format-table" class="ms-Button">
            <span class="ms-Button-label">Format table</span>
        </button>

    </div>
  language: html
libraries: |-
  // Office.js
  https://appsforoffice.officeapps.live.com/afo/lib/beta/hosted/office.js 

  // NPM libraries
  jquery
  office-ui-fabric-js/dist/js/fabric.min.js
  office-ui-fabric-js/dist/css/fabric.min.css
  office-ui-fabric-js/dist/css/fabric.components.min.css
  @microsoft/office-js-helpers/dist/office.helpers.min.js
  core-js/client/core.min.js

  // IntelliSense: Use dt~library_name for DefinitelyTyped or URLs to d.ts files
  dt~office-js
  dt~jquery
  dt~core-js
  @microsoft/office-js-helpers/dist/office.helpers.d.ts

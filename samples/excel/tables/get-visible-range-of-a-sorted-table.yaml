id: ''
gist: ''
source: EXCEL
author: Microsoft
name: Get visible range from a sorted table
description: Get visible range from a sorted table
script:
  content: "$('#create-table').click(createTable);\n$('#get-visible-range').click(getVisibleRange);\n\n/** Create a new table with some sample data */\nfunction createTable() {\n    Excel.run(async (context) => {\n        let sheet: Excel.Worksheet;\n        try {\n            // If sheet already exists, queue a command to delete it\n            context.workbook.worksheets.getItem(\"Playground\").delete();\n\n            // Then create a proxy object for a new worksheet\n            sheet = context.workbook.worksheets.add(\"Playground\");\n\n            // Call the helper to create the table\n            await queueCreateTable(sheet);\n\n            //Queue a command to activate the sheet\n            sheet.activate();\n\n            // Run all of the queued up commands\n            await context.sync();\n        }\n        catch (error) {\n            // Try to activate the new sheet regardless, to show\n            // how far the processing got before failing\n            sheet.activate();\n            await context.sync();\n\n            // Then re-throw the original error, for appropriate error-handling\n            // (in this snippet, simply showing a notification)\n            throw error;\n        }\n    })\n    .catch(handleError);\n}\n\n\n/** Create a new table with some sample data */\nfunction getVisibleRange() {\n    Excel.run(async (context) => {\n        let sheet: Excel.Worksheet;\n        try {\n            // Queue a command to get the sheet\n            sheet = context.workbook.worksheets.getItem(\"Playground\");\n\n            // Call the helper to sort the table\n            await queueGetVisibleRange(sheet);\n\n            // Run all of the queued up commands\n            await context.sync();\n        }\n        catch (error) {\n            // Try to activate the new sheet regardless, to show\n            // how far the processing got before failing\n            sheet.activate();\n            await context.sync();\n\n            // Then re-throw the original error, for appropriate error-handling\n            // (in this snippet, simply showing a notification)\n            throw error;\n        }\n    })\n    .catch(handleError);\n}\n  // Helper functions:\n\n    // Creates the table\n    async function queueCreateTable(sheet: Excel.Worksheet) {\n\n        // Queue a command to add a table to the sheet\n        let expensesTable = sheet.tables.add('A1:D1', true);\n        expensesTable.name = \"ExpensesTable\";\n\n        // Queue a command to set the header row\n        expensesTable.getHeaderRowRange().values = [[\"DATE\", \"MERCHANT\", \"CATEGORY\", \"AMOUNT\"]];\n\n        // Queue a command to add rows to the table\n        expensesTable.rows.add(null, [\n            [\"1/1/2017\", \"THE PHONE COMPANY\", \"Communications\", \"$120\"],\n            [\"1/2/2017\", \"NORTHWIND ELECTRIC CARS\", \"Transportation\", \"$142\"],\n            [\"1/5/2017\", \"BEST FOR YOU ORGANICS COMPANY\", \"Groceries\", \"$27\"],\n            [\"1/10/2017\", \"COHO VINEYARD\", \"Restaurant\", \"$33\"],\n            [\"1/11/2017\", \"BELLOWS COLLEGE\", \"Education\", \"$350\"],\n            [\"1/15/2017\", \"TREY RESEARCH\", \"Other\", \"$135\"],\n            [\"1/15/2017\", \"BEST FOR YOU ORGANICS COMPANY\", \"Groceries\", \"$97\"]\n        ]);  \n\n        // Queue a command to set the number format of the Amount column\n         //expensesTable.columns.getItem(\"AMOUNT\").numberFormat = \"$#\";\n\n        //Autofit columns and rows\n        sheet.getUsedRange().getEntireColumn().format.autofitColumns();\n        sheet.getUsedRange().getEntireRow().format.autofitRows();\n    }\n\n    // Sort the table data\n    async function queueGetVisibleRange(sheet: Excel.Worksheet) {\n\n        // Queue a command to get the table\n        const expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n                console.log(\"inside\");\n\n        // Queue a command to sort by most expensive transactions at the top (Amount, descending order)\n            var sortRange = expensesTable.getDataBodyRange();\n            sortRange.sort.apply([\n\t\t\t\t{\n\t\t\t\t    key: 3,\n\t\t\t\t    ascending: false,\n\t\t\t\t},\n            ]);\n\n            \n                var visibleRange = expensesTable.getDataBodyRange().getVisibleView().load(\"values\");\n\n                await sheet.context.sync();\n               \n                const visibleValues = visibleRange.values;\n\n                //Write the values to a different range\n                sheet.getRange(\"A21:D27\").values = visibleValues;\n\n    }\n\nfunction handleError(error) {\n    showNotification(\"Error\", error);\n    OfficeHelpers.Utilities.log(error);\n}\n\nfunction showNotification(header, text) {\n    let container = document.getElementById('notification-popup');\n    let headerPlaceholder = container.querySelector('.notification-popup-title');\n    let textPlaceholder = container.querySelector('.ms-MessageBanner-clipper');\n\n    headerPlaceholder.textContent = header;\n    textPlaceholder.textContent = text;\n\n    let closeButton = container.querySelector('.ms-MessageBanner-close');\n    closeButton.addEventListener(\"click\", function () {\n        if (container.className.indexOf(\"hide\") === -1) {\n            container.className = \"ms-MessageBanner is-hidden\";\n        }\n        closeButton.removeEventListener(\"click\", null);\n    });\n\n    container.className = \"ms-MessageBanner is-expanded\";\n}"
  language: typescript
style:
  content: ".ms-Button {\r\n    padding: 10px;\r\n    margin:10px;\r\n}\r\n"
  language: css
template:
  content: |
    <div id="content-header" class="ms-font-m">
        <h1>Welcome</h1>
    </div>

    <div id="content-main" class="ms-font-m">
        <p>This sample shows how to sort the data in a table using the Excel JavaScript API.</p>
        <h3>Try it out</h3>
            <button id="create-table" class="ms-Button">
            <span class="ms-Button-label">Step 1: Create table</span>
        </button>
        <button id="get-visible-range" class="ms-Button">
            <span class="ms-Button-label">Step 2: Sort the data and get visible range</span>
        </button>
    </div>
  language: html
libraries: |-
  // Office.js
  https://appsforoffice.microsoft.com/lib/1/hosted/Office.js

  // NPM libraries
  jquery
  office-ui-fabric-js/dist/js/fabric.min.js
  office-ui-fabric-js/dist/css/fabric.min.css
  office-ui-fabric-js/dist/css/fabric.components.min.css
  @microsoft/office-js-helpers/dist/office.helpers.min.js
  core-js/client/core.min.js

  // IntelliSense: Use dt~library_name for DefinitelyTyped or URLs to d.ts files
  dt~office-js
  dt~jquery
  dt~core-js
  @microsoft/office-js-helpers/dist/office.helpers.d.ts
